diff -r c3910ccf6441 -r 40c18bb90501 configs/common/Options.py
--- a/configs/common/Options.py	Tue Feb 12 03:01:41 2019 -0600
+++ b/configs/common/Options.py	Fri Mar 23 10:34:02 2018 -0700
@@ -131,27 +131,6 @@
     # start by adding the base options that do not assume an ISA
     addNoISAOptions(parser)
 
-    # Branch Predictor Types
-    parser.add_option("--bp_type", type="string", default="None", help="Type of branch predictor: 'None' 'BiModeBP' 'TournamentBP' 'LocalBP' 'LTAGE' 'GShareBP' 'YagsBP' 'PerceptronBP'")
-    # -- GShareBP --
-    parser.add_option("--pht_pred_size", type="int", default="8192", help="Entries in GShareBP Pattern History Table (PHT)")
-    parser.add_option("--pht_ctrl_bits", type="int", default="2", help="Bits of Pattern History Table (PHT) predictors")
-    # -- LocalBP --
-    parser.add_option("--local_pred_size", type="int", default="2048", help="Size of Local Predictor")
-    parser.add_option("--local_ctrl_bits", type="int", default="2", help="Bits per counter")
-    # -- TournamentBP --
-    parser.add_option("--local_hist_size", type="int", default="2048", help="Size of Local History Table")
-    # -- BiModalBP --
-    parser.add_option("--global_pred_size", type="int", default="8192", help="Size of Global Predictor")
-    parser.add_option("--global_ctrl_bits", type="int", default="2", help="Bits per Global counter")
-    parser.add_option("--choice_pred_size", type="int", default="8192", help="Size of Choice Predictor")
-    parser.add_option("--choice_ctrl_bits", type="int", default="2", help="Bits per Choice counter")
-    # -- YagsBP --
-    # -- PerceptronBP ==
-
-    
-
-
     # system options
     parser.add_option("--list-cpu-types",
                       action="callback", callback=_listCpuTypes,
diff -r c3910ccf6441 -r 40c18bb90501 configs/common/SysPaths.py
--- a/configs/common/SysPaths.py	Tue Feb 12 03:01:41 2019 -0600
+++ b/configs/common/SysPaths.py	Fri Mar 23 10:34:02 2018 -0700
@@ -32,7 +32,7 @@
 config_root = os.path.dirname(config_path)
 
 class PathSearchFunc(object):
-    _sys_paths = [ '/home/andrew/ece511/gem5/benchmarks/FSmode', '' ]
+    _sys_paths = None
 
     def __init__(self, subdirs, sys_paths=None):
         if isinstance(subdirs, basestring):
diff -r c3910ccf6441 -r 40c18bb90501 configs/example/se.py
--- a/configs/example/se.py	Tue Feb 12 03:01:41 2019 -0600
+++ b/configs/example/se.py	Fri Mar 23 10:34:02 2018 -0700
@@ -64,7 +64,6 @@
 from common import MemConfig
 from common.Caches import *
 from common.cpu2000 import *
-from common.cores.arm.O3_ARM_v7a import *
 
 # Check if KVM support has been enabled, we might need to do VM
 # configuration if that's the case.
@@ -123,30 +122,6 @@
     else:
         return multiprocesses, 1
 
-def BPConfig(options):
-  if options.bp_type == "None" :
-    return None
-  if options.bp_type == "LocalBP" :
-    branchPred = LocalBP
-    return branchPred
-  if options.bp_type == "TournamentBP" :
-    branchPred = TournamentBP
-    return branchPred
-  if options.bp_type == "BiModeBP" :
-    branchPred = BiModeBP
-    return branchPred
-  if options.bp_type == "GShareBP" :
-    branchPred = GShareBP
-    return branchPred
-  if options.bp_type == "YagsBP" :
-    branchPred = None
-    return branchPred
-  if options.bp_type == "PerceptronBP" :
-    branchPred = None
-    return branchPred
-  return None
-
-
 
 parser = optparse.OptionParser()
 Options.addCommonOptions(parser)
@@ -196,8 +171,6 @@
 
 (CPUClass, test_mem_mode, FutureClass) = Simulation.setCPUClass(options)
 CPUClass.numThreads = numThreads
-# Configure Branch Predictor
-CPUClass.O3_ARM_v7a_BP = BPConfig(options)
 
 # Check -- do not allow SMT with multiple CPUs
 if options.smt and options.num_cpus > 1:
@@ -209,9 +182,6 @@
                 mem_ranges = [AddrRange(options.mem_size)],
                 cache_line_size = options.cacheline_size)
 
-# Configure Branch Predictors:
-
-
 if numThreads > 1:
     system.multi_thread = True
 
diff -r c3910ccf6441 -r 40c18bb90501 src/arch/arm/linux/process.cc
--- a/src/arch/arm/linux/process.cc	Tue Feb 12 03:01:41 2019 -0600
+++ b/src/arch/arm/linux/process.cc	Fri Mar 23 10:34:02 2018 -0700
@@ -69,7 +69,7 @@
 
     strcpy(name->sysname, "Linux");
     strcpy(name->nodename, "m5.eecs.umich.edu");
-    strcpy(name->release, "3.2.0");
+    strcpy(name->release, "3.0.0");
     strcpy(name->version, "#1 Mon Aug 18 11:32:15 EDT 2003");
     strcpy(name->machine, "armv7l");
 
diff -r c3910ccf6441 -r 40c18bb90501 src/cpu/pred/BranchPredictor.py
--- a/src/cpu/pred/BranchPredictor.py	Tue Feb 12 03:01:41 2019 -0600
+++ b/src/cpu/pred/BranchPredictor.py	Fri Mar 23 10:34:02 2018 -0700
@@ -86,14 +86,6 @@
     choicePredictorSize = Param.Unsigned(8192, "Size of choice predictor")
     choiceCtrBits = Param.Unsigned(2, "Bits of choice counters")
 
-class GShareBP(BranchPredictor):
-    type = 'GShareBP'
-    cxx_class = 'GShareBP'
-    cxx_header = "cpu/pred/gshare.hh"
-
-    phtPredictorSize = Param.Unsigned(8192, "Entries in pattern history table")
-    phtCtrBits = Param.Unsigned(2, "Bits of pattern history table counters")
-
 class LTAGE(BranchPredictor):
     type = 'LTAGE'
     cxx_class = 'LTAGE'
diff -r c3910ccf6441 -r 40c18bb90501 src/cpu/pred/SConscript
--- a/src/cpu/pred/SConscript	Tue Feb 12 03:01:41 2019 -0600
+++ b/src/cpu/pred/SConscript	Fri Mar 23 10:34:02 2018 -0700
@@ -43,7 +43,6 @@
 Source('ras.cc')
 Source('tournament.cc')
 Source ('bi_mode.cc')
-Source ('gshare.cc')
 Source('ltage.cc')
 DebugFlag('FreeList')
 DebugFlag('Branch')
diff -r c3910ccf6441 -r 40c18bb90501 src/cpu/pred/gshare.cc
--- a/src/cpu/pred/gshare.cc	Tue Feb 12 03:01:41 2019 -0600
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,151 +0,0 @@
-
-/* @file
- * Implementation of a GShare branch predictor
- */
-
-#include "cpu/pred/gshare.hh"
-
-#include "base/bitfield.hh"
-#include "base/intmath.hh"
-
-GShareBP::GShareBP(const GShareBPParams *params)
-    : BPredUnit(params),
-      phtPredictorSize(params->phtPredictorSize),
-      phtCtrBits(params->phtCtrBits)
-{
-    if (!isPowerOf2(phtPredictorSize))
-        fatal("Invalid choice predictor size.\n");
-
-    phtCounters.resize(phtPredictorSize);
-
-    for (int i = 0; i < phtPredictorSize; ++i) {
-        phtCounters[i].setBits(phtCtrBits);
-    }
-
-    historyRegisterMask = mask(globalHistoryBits);
-    phtHistoryMask = phtPredictorSize - 1;
-
-    phtThreshold = (ULL(1) << (phtCtrBits - 1)) - 1;
-}
-
-/*
- * For an unconditional branch mark it as taken.
- */
-void
-GShareBP::uncondBranch(ThreadID tid, Addr pc, void * &bpHistory)
-{
-    BPHistory *history = new BPHistory;
-    history->globalHistoryReg = globalHistoryReg[tid];
-    history->pred = true;
-    bpHistory = static_cast<void*>(history);
-    updateGlobalHistReg(tid, true);
-}
-
-void
-GShareBP::squash(ThreadID tid, void *bpHistory)
-{
-    BPHistory *history = static_cast<BPHistory*>(bpHistory);
-    globalHistoryReg[tid] = history->globalHistoryReg;
-
-    delete history;
-}
-
-/*
- * Look up the prediction for a branch. Use the PC and a hash of the 
- * global history register to index into the PHT and return the
- * prediction.
- */
-bool
-GShareBP::lookup(ThreadID tid, Addr branchAddr, void * &bpHistory)
-{
-    unsigned phtHistoryIdx = ((branchAddr >> instShiftAmt)
-                                & phtHistoryMask);
-
-    assert(phtHistoryIdx < phtPredictorSize);
-
-    bool phtPrediction = phtCounters[phtHistoryIdx].read()
-                            > phtThreshold;
-
-    BPHistory *history = new BPHistory;
-    history->globalHistoryReg = globalHistoryReg[tid];
-    history->pred = phtPrediction;
-    bpHistory = static_cast<void*>(history);
-    updateGlobalHistReg(tid, phtPrediction);
-
-    return phtPrediction;
-}
-
-void
-GShareBP::btbUpdate(ThreadID tid, Addr branchAddr, void * &bpHistory)
-{
-    globalHistoryReg[tid] &= (historyRegisterMask & ~ULL(1));
-}
-
-/* Only the selected direction predictor will be updated with the final
- * outcome; the status of the unselected one will not be altered. The choice
- * predictor is always updated with the branch outcome, except when the
- * choice is opposite to the branch outcome but the selected counter of
- * the direction predictors makes a correct final prediction.
- */
-void
-GShareBP::update(ThreadID tid, Addr branchAddr, bool taken, void *bpHistory,
-                 bool squashed)
-{
-    assert(bpHistory);
-
-    BPHistory *history = static_cast<BPHistory*>(bpHistory);
-
-    // We do not update the counters speculatively on a squash.
-    // We just restore the global history register.
-    if (squashed) {
-        globalHistoryReg[tid] = (history->globalHistoryReg << 1) | taken;
-        return;
-    }
-
-    unsigned phtHistoryIdx = ((branchAddr >> instShiftAmt)
-                                & phtHistoryMask);
-
-    assert(phtHistoryIdx < phtPredictorSize);
-
-    if (history->pred == taken) {
-      if(taken) {
-        /* Predicted taken correct */
-        phtCounters[phtHistoryIdx].increment();
-      }
-      else {
-        /* Predicted not taken correctly */
-        phtCounters[phtHistoryIdx].decrement();
-      } 
-    } else {
-      if (taken) {
-        /* Predicted taken incorrectly */
-        phtCounters[phtHistoryIdx].decrement();
-      }
-      else {
-        /* Predicted not taken incorrectly */
-        phtCounters[phtHistoryIdx].increment();
-      }
-    }
-
-    delete history;
-}
-
-unsigned
-GShareBP::getGHR(ThreadID tid, void *bp_history) const
-{
-    return static_cast<BPHistory*>(bp_history)->globalHistoryReg;
-}
-
-void
-GShareBP::updateGlobalHistReg(ThreadID tid, bool taken)
-{
-    globalHistoryReg[tid] = taken ? (globalHistoryReg[tid] << 1) | 1 :
-                               (globalHistoryReg[tid] << 1);
-    globalHistoryReg[tid] &= historyRegisterMask;
-}
-
-GShareBP*
-GShareBPParams::create()
-{
-    return new GShareBP(this);
-}
diff -r c3910ccf6441 -r 40c18bb90501 src/cpu/pred/gshare.hh
--- a/src/cpu/pred/gshare.hh	Tue Feb 12 03:01:41 2019 -0600
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,52 +0,0 @@
-/* @file
- * Implementation of a GShare branch predictor
- */
-
-#ifndef __CPU_PRED_GSHARE_PRED_HH__
-#define __CPU_PRED_GSHARE_PRED_HH__
-
-#include "cpu/pred/bpred_unit.hh"
-#include "cpu/pred/sat_counter.hh"
-#include "params/GShareBP.hh"
-
-class GShareBP : public BPredUnit
-{
-  public:
-    GShareBP(const GShareBPParams *params);
-    void uncondBranch(ThreadID tid, Addr pc, void * &bp_history);
-    void squash(ThreadID tid, void *bp_history);
-    bool lookup(ThreadID tid, Addr branch_addr, void * &bp_history);
-    void btbUpdate(ThreadID tid, Addr branch_addr, void * &bp_history);
-    void update(ThreadID tid, Addr branch_addr, bool taken, void *bp_history,
-                bool squashed);
-    unsigned getGHR(ThreadID tid, void *bp_history) const;
-
-  private:
-    void updateGlobalHistReg(ThreadID tid, bool taken);
-
-    struct BPHistory {
-        unsigned globalHistoryReg;
-        // the final taken/not-taken prediction
-        // true: predict taken
-        // false: predict not-taken
-        bool pred;
-    };
-
-    // pattern history table predictors
-    std::vector<SatCounter> phtCounters;
-
-    std::vector<unsigned> globalHistoryReg;
-
-    unsigned historyRegister;
-
-    unsigned globalHistoryBits;
-    unsigned historyRegisterMask;
-
-    unsigned phtPredictorSize;
-    unsigned phtCtrBits;
-    unsigned phtHistoryMask;
-
-    unsigned phtThreshold;
-};
-
-#endif // __CPU_PRED_GSHARE_PRED_HH__
