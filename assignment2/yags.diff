diff -r 7f72aa0fe202 -r 7e730f6167d0 configs/example/se.py
--- a/configs/example/se.py	Tue Feb 12 22:11:58 2019 -0600
+++ b/configs/example/se.py	Wed Feb 13 23:26:25 2019 -0600
@@ -123,10 +123,6 @@
     else:
         return multiprocesses, 1
 
-def BPConfig(options):
-  return None
-
-
 
 parser = optparse.OptionParser()
 Options.addCommonOptions(parser)
@@ -191,7 +187,8 @@
 if options.bp_type == "GShareBP" :
   CPUClass.branchPred = GShareBP()
 
-#if options.bp_type == "YagsBP" :
+if options.bp_type == "YagsBP" :
+  CPUClass.branchPred = YagsBP()
 
 #if options.bp_type == "PerceptronBP" :
 
diff -r 7f72aa0fe202 -r 7e730f6167d0 src/cpu/pred/BranchPredictor.py
--- a/src/cpu/pred/BranchPredictor.py	Tue Feb 12 22:11:58 2019 -0600
+++ b/src/cpu/pred/BranchPredictor.py	Wed Feb 13 23:26:25 2019 -0600
@@ -86,6 +86,17 @@
     choicePredictorSize = Param.Unsigned(8192, "Size of choice predictor")
     choiceCtrBits = Param.Unsigned(2, "Bits of choice counters")
 
+class YagsBP(BranchPredictor):
+    type = 'YagsBP'
+    cxx_class = 'YagsBP'
+    cxx_header = "cpu/pred/yags.hh"
+
+    globalPredictorSize = Param.Unsigned(8192, "Size of global predictor")
+    globalCtrBits = Param.Unsigned(2, "Bits per counter")
+    choicePredictorSize = Param.Unsigned(8192, "Size of choice predictor")
+    choiceCtrBits = Param.Unsigned(2, "Bits of choice counters")
+    tagMask = Param.Unsigned(8, "Bit width of global predictor tags")
+
 class GShareBP(BranchPredictor):
     type = 'GShareBP'
     cxx_class = 'GShareBP'
diff -r 7f72aa0fe202 -r 7e730f6167d0 src/cpu/pred/SConscript
--- a/src/cpu/pred/SConscript	Tue Feb 12 22:11:58 2019 -0600
+++ b/src/cpu/pred/SConscript	Wed Feb 13 23:26:25 2019 -0600
@@ -42,8 +42,9 @@
 Source('indirect.cc')
 Source('ras.cc')
 Source('tournament.cc')
-Source ('bi_mode.cc')
-Source ('gshare.cc')
+Source('bi_mode.cc')
+Source('gshare.cc')
+Source('yags.cc')
 Source('ltage.cc')
 DebugFlag('FreeList')
 DebugFlag('Branch')
diff -r 7f72aa0fe202 -r 7e730f6167d0 src/cpu/pred/yags.cc
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/cpu/pred/yags.cc	Wed Feb 13 23:26:25 2019 -0600
@@ -0,0 +1,252 @@
+/* @file
+ * Implementation of a yags branch predictor
+ */
+
+#include "cpu/pred/yags.hh"
+
+#include "base/bitfield.hh"
+#include "base/intmath.hh"
+
+YagsBP::YagsBP(const YagsBPParams *params)
+    : BPredUnit(params),
+      globalHistoryReg(params->numThreads, 0),
+      globalHistoryBits(ceilLog2(params->globalPredictorSize)),
+      choicePredictorSize(params->choicePredictorSize),
+      choiceCtrBits(params->choiceCtrBits),
+      globalPredictorSize(params->globalPredictorSize),
+      globalCtrBits(params->globalCtrBits),
+      tagMask(params->tagMask)
+{
+    if (!isPowerOf2(choicePredictorSize))
+        fatal("Invalid choice predictor size.\n");
+    if (!isPowerOf2(globalPredictorSize))
+        fatal("Invalid global history predictor size.\n");
+
+    choiceCounters.resize(choicePredictorSize);
+    takenCounters.resize(globalPredictorSize);
+    takenTags.resize(globalPredictorSize);
+    notTakenCounters.resize(globalPredictorSize);
+    notTakenTags.resize(globalPredictorSize);
+
+    for (int i = 0; i < choicePredictorSize; ++i) {
+        choiceCounters[i].setBits(choiceCtrBits);
+    }
+    for (int i = 0; i < globalPredictorSize; ++i) {
+        takenCounters[i].setBits(globalCtrBits);
+        notTakenCounters[i].setBits(globalCtrBits);
+    }
+
+    historyRegisterMask = mask(globalHistoryBits);
+    choiceHistoryMask = choicePredictorSize - 1;
+    globalHistoryMask = globalPredictorSize - 1;
+
+    choiceThreshold = (ULL(1) << (choiceCtrBits - 1)) - 1;
+    takenThreshold = (ULL(1) << (globalCtrBits - 1)) - 1;
+    notTakenThreshold = (ULL(1) << (globalCtrBits - 1)) - 1;
+}
+
+/*
+ * For an unconditional branch we set its history such that
+ * everything is set to taken. I.e., its choice predictor
+ * chooses the taken array and the taken array predicts taken.
+ */
+void
+YagsBP::uncondBranch(ThreadID tid, Addr pc, void * &bpHistory)
+{
+    BPHistory *history = new BPHistory;
+    history->globalHistoryReg = globalHistoryReg[tid];
+    history->choicePrediction = true;
+    history->takenPred = true;
+    history->notTakenPred = true;
+    history->finalPred = true;
+    history->cacheHit = false;
+    bpHistory = static_cast<void*>(history);
+    updateGlobalHistReg(tid, true);
+}
+
+void
+YagsBP::squash(ThreadID tid, void *bpHistory)
+{
+    BPHistory *history = static_cast<BPHistory*>(bpHistory);
+    globalHistoryReg[tid] = history->globalHistoryReg;
+
+    delete history;
+}
+
+/*
+ * Here we lookup the actual branch prediction. We use the PC to
+ * identify the bias of a particular branch, which is based on the
+ * prediction in the choice array. A hash of the global history
+ * register and a branch's PC is used to index into both the taken
+ * and not-taken predictors, which both present a prediction. The
+ * choice array's prediction is used to select between the two
+ * direction predictors for the final branch prediction.
+ */
+bool
+YagsBP::lookup(ThreadID tid, Addr branchAddr, void * &bpHistory)
+{
+    unsigned choiceHistoryIdx = ((branchAddr >> instShiftAmt)
+                                & choiceHistoryMask);
+    unsigned globalHistoryIdx = (((branchAddr >> instShiftAmt)
+                                ^ globalHistoryReg[tid])
+                                & globalHistoryMask);
+
+    assert(choiceHistoryIdx < choicePredictorSize);
+    assert(globalHistoryIdx < globalPredictorSize);
+
+    bool choicePrediction = choiceCounters[choiceHistoryIdx].read() > choiceThreshold;
+
+    bool takenHit = (((branchAddr >> 2) & tagMask) == takenTags[globalHistoryIdx]);
+
+    bool notTakenHit = (((branchAddr >> 2) & tagMask) == notTakenTags[globalHistoryIdx]);
+
+    bool takenGHBPrediction = takenCounters[globalHistoryIdx].read() > takenThreshold;
+
+    bool notTakenGHBPrediction = notTakenCounters[globalHistoryIdx].read() > notTakenThreshold;
+
+    bool cacheHit;
+    bool globalPrediction;
+
+    if(choicePrediction) {
+      cacheHit = notTakenHit;
+      globalPrediction = notTakenGHBPrediction;
+    }
+    else {
+      cacheHit = takenHit;
+      globalPrediction = takenGHBPrediction;
+    }
+
+
+    bool finalPrediction;
+
+    BPHistory *history = new BPHistory;
+    history->globalHistoryReg = globalHistoryReg[tid];
+    history->choicePrediction = choicePrediction;
+    history->takenPred = takenGHBPrediction;
+    history->notTakenPred = notTakenGHBPrediction;
+    history->cacheHit = cacheHit;
+
+    if (cacheHit) {
+      finalPrediction = globalPrediction;
+    } else {
+      finalPrediction = choicePrediction;
+    }
+
+    history->finalPred = finalPrediction;
+    bpHistory = static_cast<void*>(history);
+    updateGlobalHistReg(tid, finalPrediction);
+
+    return finalPrediction;
+}
+
+void
+YagsBP::btbUpdate(ThreadID tid, Addr branchAddr, void * &bpHistory)
+{
+    globalHistoryReg[tid] &= (historyRegisterMask & ~ULL(1));
+}
+
+/* Only the selected direction predictor will be updated with the final
+ * outcome; the status of the unselected one will not be altered. The choice
+ * predictor is always updated with the branch outcome, except when the
+ * choice is opposite to the branch outcome but the selected counter of
+ * the direction predictors makes a correct final prediction.
+ */
+void
+YagsBP::update(ThreadID tid, Addr branchAddr, bool taken, void *bpHistory,
+                 bool squashed)
+{
+    assert(bpHistory);
+
+    BPHistory *history = static_cast<BPHistory*>(bpHistory);
+
+    // We do not update the counters speculatively on a squash.
+    // We just restore the global history register.
+    if (squashed) {
+        globalHistoryReg[tid] = (history->globalHistoryReg << 1) | taken;
+        return;
+    }
+
+    unsigned choiceHistoryIdx = ((branchAddr >> instShiftAmt) & choiceHistoryMask);
+    unsigned globalHistoryIdx = (((branchAddr >> instShiftAmt) ^ history->globalHistoryReg) & globalHistoryMask);
+
+    assert(choiceHistoryIdx < choicePredictorSize);
+    assert(globalHistoryIdx < globalPredictorSize);
+
+    if (history->choicePrediction) {
+      if(history->cacheHit) {
+        // Hit in notTakenPredictor
+        if(taken) {
+          notTakenCounters[globalHistoryIdx].increment();
+        }
+        else {
+          notTakenCounters[globalHistoryIdx].decrement();
+        }
+      }
+    } else {
+      if(history->cacheHit) {
+        // Hit in takenPredictor
+        if (taken) {
+            takenCounters[globalHistoryIdx].increment();
+        } else {
+            takenCounters[globalHistoryIdx].decrement();
+        }
+      }
+    }
+
+    if (history->finalPred == taken) {
+       /* If the final prediction matches the actual branch's
+        * outcome and the choice predictor matches the final
+        * outcome, we update the choice predictor, otherwise it
+        * is not updated. While the designers of the bi-mode
+        * predictor don't explicity say why this is done, one
+        * can infer that it is to preserve the choice predictor's
+        * bias with respect to the branch being predicted; afterall,
+        * the whole point of the bi-mode predictor is to identify the
+        * atypical case when a branch deviates from its bias.
+        */
+        if (history->finalPred == history->choicePrediction) {
+            if (taken) {
+                choiceCounters[choiceHistoryIdx].increment();
+            } else {
+                choiceCounters[choiceHistoryIdx].decrement();
+            }
+        }
+    } else {
+        // always update the choice predictor on an incorrect prediction
+        if (taken) {
+            choiceCounters[choiceHistoryIdx].increment();
+        } else {
+            choiceCounters[choiceHistoryIdx].decrement();
+        }
+    }
+
+    // Update TAG
+    if(history->choicePrediction) {
+      notTakenTags[globalHistoryIdx] = (branchAddr >> 2) & tagMask;
+    }
+    else {
+      takenTags[globalHistoryIdx] = (branchAddr >> 2) & tagMask;
+    }
+
+    delete history;
+}
+
+unsigned
+YagsBP::getGHR(ThreadID tid, void *bp_history) const
+{
+    return static_cast<BPHistory*>(bp_history)->globalHistoryReg;
+}
+
+void
+YagsBP::updateGlobalHistReg(ThreadID tid, bool taken)
+{
+    globalHistoryReg[tid] = taken ? (globalHistoryReg[tid] << 1) | 1 :
+                               (globalHistoryReg[tid] << 1);
+    globalHistoryReg[tid] &= historyRegisterMask;
+}
+
+YagsBP*
+YagsBPParams::create()
+{
+    return new YagsBP(this);
+}
diff -r 7f72aa0fe202 -r 7e730f6167d0 src/cpu/pred/yags.hh
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/cpu/pred/yags.hh	Wed Feb 13 23:26:25 2019 -0600
@@ -0,0 +1,71 @@
+/* @file
+ * Implementation of a yags branch predictor
+ */
+
+#ifndef __CPU_PRED_YAGS_PRED_HH__
+#define __CPU_PRED_YAGS_PRED_HH__
+
+#include "cpu/pred/bpred_unit.hh"
+#include "cpu/pred/sat_counter.hh"
+#include "params/YagsBP.hh"
+
+class YagsBP : public BPredUnit
+{
+  public:
+    YagsBP(const YagsBPParams *params);
+    void uncondBranch(ThreadID tid, Addr pc, void * &bp_history);
+    void squash(ThreadID tid, void *bp_history);
+    bool lookup(ThreadID tid, Addr branch_addr, void * &bp_history);
+    void btbUpdate(ThreadID tid, Addr branch_addr, void * &bp_history);
+    void update(ThreadID tid, Addr branch_addr, bool taken, void *bp_history,
+                bool squashed);
+    unsigned getGHR(ThreadID tid, void *bp_history) const;
+
+  private:
+    void updateGlobalHistReg(ThreadID tid, bool taken);
+
+    struct BPHistory {
+        unsigned globalHistoryReg;
+        bool choicePrediction;
+        bool takenUsed;
+        bool notTakenUsed;
+        bool takenPred;
+        bool notTakenPred;
+        bool finalPred;
+        bool cacheHit;
+    };
+
+    // choice predictors
+    std::vector<SatCounter> choiceCounters;
+
+    // taken direction predictors
+    std::vector<SatCounter> takenCounters;
+    std::vector<unsigned> takenTags;
+
+    // not-taken direction predictors
+    std::vector<SatCounter> notTakenCounters;
+    std::vector<unsigned> notTakenTags;
+
+    std::vector<unsigned> globalHistoryReg;
+    unsigned globalHistoryBits;
+    unsigned historyRegisterMask;
+    
+    // Choice Predictor Params
+    unsigned choicePredictorSize;
+    unsigned choiceCtrBits;
+    unsigned choiceHistoryMask;
+
+    // Global History Predictor Params
+    unsigned globalPredictorSize;
+    unsigned globalCtrBits;
+    unsigned globalHistoryMask;
+
+    // Tag mask for address compare
+    unsigned tagMask;
+
+    unsigned choiceThreshold;
+    unsigned takenThreshold;
+    unsigned notTakenThreshold;
+};
+
+#endif // __CPU_PRED_YAGS_PRED_HH__
